<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/context
     			http://www.springframework.org/schema/context/spring-context.xsd
     			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
     			http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
    			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
     			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
     			http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">
	<task:annotation-driven /><!-- 定时任务 -->
	<bean id="basePropertyPlaceHolder"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
		lazy-init="true">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath*:/properties/jdbc.properties</value>
			</list>
		</property>
	</bean>

	<context:component-scan base-package="com.zhai.service" use-default-filters="false">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Service" />
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<!-- databse configuration -->
	<bean id="baseDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${mysql.driverClassName}" />
		<property name="url" value="${mysql.url}" />
		<property name="username" value="${mysql.username}" />
		<property name="password" value="${mysql.password}" />
		
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="50" />
		<!-- 获取连接最大等待时间 1分钟-->
		<property name="maxWait" value="60000" />
		<!-- 连接池中最大的空闲的连接数，超过的空闲连接将被释放 -->
		<property name="maxIdle" value="20" />
		<!-- 连接池中最小的空闲的连接数，低于这个数量会被创建新的连接 -->
		<property name="minIdle" value="0" />
		
		<!-- 是否进行连接检测 以及检测连接的sql-->
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 
			每过timeBetweenEvictionRunsMillis 时间，就会启动一个线程，
			校验连接池中闲置时间超过minEvictableIdleTimeMillis的连接对象-->
		<property name="timeBetweenEvictionRunsMillis" value="300000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="1200000" />
		
		<!-- 打开removeAbandoned功能 自动回收超时连接  -->
		<property name="removeAbandoned" value="true" />
		<!-- 1000秒，也就是16分钟多 -->
		<property name="removeAbandonedTimeout" value="1000" />
		
		
	</bean>
	
	<!-- Transaction management, use PlatformTransactionManager instead of JtaTransactionManager 
		with jndi -->
	<bean id="txManagerUser"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="baseDataSource" />
	</bean>
	<tx:advice id="txAdvicedrugUser" transaction-manager="txManagerUser">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />  
            <tx:method name="append*" propagation="REQUIRED" />  
            <tx:method name="save*" propagation="REQUIRED" />  
            <tx:method name="do*" propagation="REQUIRED" />  
            <tx:method name="update*" propagation="REQUIRED" />  
            <tx:method name="modify*" propagation="REQUIRED" />  
            <tx:method name="edit*" propagation="REQUIRED" />  
            <tx:method name="delete*" propagation="REQUIRED" />  
            <tx:method name="remove*" propagation="REQUIRED" />  
            <tx:method name="init" propagation="REQUIRED" />  
            <tx:method name="delAndInit" propagation="REQUIRED" />  
  
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />  
            <tx:method name="find*" propagation="REQUIRED" read-only="true" />  
            <tx:method name="load*" propagation="REQUIRED" read-only="true" />  
            <tx:method name="search*" propagation="REQUIRED" read-only="true" />  
            <tx:method name="datagrid*" propagation="REQUIRED"  
                read-only="true" />  
  
            <tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	<aop:config>	
		<aop:pointcut id="userServiceOperation"
			expression="execution(* com.zhai..service..*+.*(..))" />
		<aop:advisor advice-ref="txAdvicedrugUser" pointcut-ref="userServiceOperation" />
	</aop:config>
	<bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="txManagerUser" />
	</bean>
	<!-- define the SqlSessionFactory -->
	<bean id="sqlSessionFactoryUser" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="baseDataSource" />
		<property name="configLocation" value="classpath:config/MyBatisConfiguration.xml" />
		<property name="mapperLocations" value="classpath*:mybatis/**/*.xml" />
		<!-- <property name="typeAliasesPackage" value="cn.teacheredu.vote.domain" />
		<property name="typeAliases" value="org.springframework.util.LinkedCaseInsensitiveMap" /> -->
	</bean>
	
	<!-- 扫描Mybatis接口包定义。 
	 ======================================================================== -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.zhai.mapping" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryUser"/>
	</bean>
	<!-- DAO Mapper 层 -->
	<!-- ======================================================================== 
	<bean id="baseMapperUser" class="org.mybatis.spring.mapper.MapperFactoryBean"
		abstract="true" lazy-init="true">
		<property name="sqlSessionFactory" ref="sqlSessionFactoryUser" />
	</bean>
	<bean id="userMapper" parent="baseMapperUser">
		<property name="mapperInterface"
			value="cn.teacheredu.mapping.UserMapper" />
	</bean>-->


	<!-- Service层 
	<bean id="userService" class="cn.teacheredu.service.impl.UserServiceImpl">
		<property name="userMapper" ref="userMapper" />
	</bean>-->
	
	
	<!--&lt;!&ndash; 配置石英任务 &ndash;&gt;
	<bean id="jobDetailBean" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass" value="cn.teacheredu.controller.MyQuartzJobController" />
	</bean>

	&lt;!&ndash; 配置石英任务触发器 &ndash;&gt;
	<bean id="triggerBean" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="jobDetailBean" />
		<property name="cronExpression" value="0 0 0 * * ?" />&lt;!&ndash; 每天0点执行 &ndash;&gt;
	</bean>-->

	<!-- 配置任务调度工厂Bean -->
<!--	<bean id="triggerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="triggerBean" />
			</list>
		</property>
	</bean>-->
	
	<!-- 引入memcached配置文件
    <import resource="spring-memcached.xml"/> -->  
</beans>