<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                         http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.2.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
  <!--启用spring的一些annotation -->
  <context:annotation-config/>
  <mvc:annotation-driven>
    <!-- 解决@ResponseBody中文乱码 -->
    <mvc:message-converters>
      <bean class="org.springframework.http.converter.StringHttpMessageConverter">
        <constructor-arg value="UTF-8" />
        <!-- 用于避免响应头过大 -->
        <property name="writeAcceptCharset" value="false" />
      </bean>
    </mvc:message-converters>

  </mvc:annotation-driven>
  <!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
  <context:component-scan base-package="com.zhai">
    <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
  </context:component-scan>

  <context:component-scan base-package="com.zhai">
    <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service" />
  </context:component-scan>

  <!--HandlerMapping 无需配置，springmvc可以默认启动-->

  <!--静态资源映射-->
  <!--本项目把静态资源放在了WEB-INF的statics目录下，资源映射如下-->
  <!--<mvc:resources mapping="/css/**" location="/WEB-INF/statics/css/"/>-->
  <!--<mvc:resources mapping="/js/**" location="/WEB-INF/statics/js/"/>-->
  <!--<mvc:resources mapping="/image/**" location="/WEB-INF/statics/image/"/>-->

  <!--但是项目部署到linux下发现WEB-INF的静态资源会出现无法解析的情况，但是本地tomcat访问正常，因此建议还是直接把静态资源放在webapp的statics下，映射配置如下-->
  <!--<mvc:resources mapping="/css/**" location="/statics/css/"/>-->
  <!--<mvc:resources mapping="/js/**" location="/statics/js/"/>-->
  <!--<mvc:resources mapping="/image/**" location="/statics/images/"/>-->

  <!-- 配置注解驱动 可以将request参数与绑定到controller参数上 -->
  <mvc:annotation-driven/>

  <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀(如果最后一个还是表示文件夹,则最后的斜杠不要漏了) 使用JSP-->
  <!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- -->
  <bean id="defaultViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
    <property name="prefix" value="/WEB-INF/views/"/><!--设置JSP文件的目录位置-->
    <property name="suffix" value=".jsp"/>
  </bean>

  <!-- springmvc文件上传需要配置的节点-->
  <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    <property name="maxUploadSize" value="20971500"/>
    <property name="defaultEncoding" value="UTF-8"/>
    <property name="resolveLazily" value="true"/>
  </bean>
  <!-- 读取配置文件信息,在Spring的配置文件中使用EL表达式填充值 -->
  <context:property-placeholder location="classpath:properties/jdbc.properties"/>
  <!-- 配置数据库连接池 -->
  <bean id="dataSourceLocal" name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
    <!-- 指定连接数据库的驱动-->
    <property name="driverClass" value="${jdbc_driverClassName}"/>
    <!-- 指定连接数据库的URL-->
    <property name="jdbcUrl" value="${jdbc_url}"/>
    <!-- 指定连接数据库的用户名-->
    <property name="user" value="${jdbc_username}"/>
    <!-- 指定连接数据库的密码-->
    <property name="password" value="${jdbc_password}"/>
    <!-- 指定连接池中保留的最大连接数. Default:15-->
    <property name="maxPoolSize" value="${maxPoolSize}"/>
    <!-- 指定连接池中保留的最小连接数-->
    <property name="minPoolSize" value="${minPoolSize}"/>
    <!-- 指定连接池的初始化连接数 取值应在minPoolSize 与 maxPoolSize 之间.Default:3-->
    <property name="initialPoolSize" value="${initialPoolSize}"/>
    <!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。 Default:0-->
    <property name="maxIdleTime" value="${maxIdleTime}"/>
    <!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数. Default:3-->
    <property name="acquireIncrement" value="${acquireIncrement}"/>
    <!-- JDBC的标准,用以控制数据源内加载的PreparedStatements数量。
    但由于预缓存的statements属于单个connection而不是整个连接池所以设置这个参数需要考虑到多方面的因数.如果maxStatements与maxStatementsPerConnection均为0,则缓存被关闭。Default:0-->
    <property name="maxStatements" value="${maxStatements}"/>
    <!-- 每60秒检查所有连接池中的空闲连接.Default:0 -->
    <property name="idleConnectionTestPeriod" value="${idleConnectionTestPeriod}"/>
  </bean>
</beans>